getObject(
  key string,
  options? {
    ExpectedBucketOwner?: string,
    IfMatch?: string,
    IfModifiedSince?: Date|Date.toString()|number,
    IfNoneMatch?: string,
    IfUnmodifiedSince?: Date|Date.toString()|number,
    PartNumber?: number,
    Range?: string,
    RequestPayer?: requester,
    ResponseCacheControl?: string,
    ResponseContentDisposition?: string,
    ResponseContentEncoding?: string,
    ResponseContentLanguage?: string,
    ResponseContentType?: string,
    ResponseExpires?: Date|Date.toString()|number,
    SSECustomerAlgorithm?: string,
    SSECustomerKey?: string|Buffer,
    SSECustomerKeyMD5?: string,
    VersionId?: string,
  },
) -> Promise<{
  Body: Buffer|TypedArray|ReadableStream,
  DeleteMarker: boolean,
  AcceptRanges: string,
  Expiration: string,
  Restore: string,
  LastModified: Date,
  ContentLength: number,
  ETag: string,
  MissingMeta: number,
  VersionId: string,
  CacheControl: string,
  ContentDisposition: string,
  ContentEncoding: string,
  ContentRange: string,
  ContentType: string,
  Expires: Date,
  WebsiteRedirectLocation: string,
  ServerSideEncryption?: 'AES256'|'aws:kms',
  Metadata?: Object<string>,
  Range?: string, // 'bytes=0-9'
  SSECustomerAlgorithm?: string,
  SSECustomerKey?: string,
  SSEKMSKeyId?: string,
  StorageClass?: 'STANDARD'|'REDUCED_REDUNDANCY'|'STANDARD_IA'|'ONEZONE_IA'|'INTELLIGENT_TIERING'|'GLACIER'|'DEEP_ARCHIVE'|'OUTPOSTS',
  RequestCharged?: string,
  ReplicationStatus?: 'COMPLETE'|'PENDING'|'FAILED'|'REPLICA',
  PartsCount: number,
  TagCount: number,
  ObjectLockMode: 'GOVERNANCE'|'COMPLIANCE',
  ObjectLockRetainUntilDate?: Date|Date.toString()|number,
  ObjectLockLegalHoldStatus?: 'ON'|'OFF',
}>
